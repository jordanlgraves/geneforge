"""
Gateway Setup Module

This module ensures that the gateway module from Cello is accessible to our wrapper script.
It copies the gateway.py file from ext_repos/Cello-v2-1-Core/core_algorithm/utils/py4j_gateway/
to the current directory or a specified directory for easier access.
"""

import os
import sys
import shutil
import logging

def setup_gateway(target_dir=None):
    """
    Set up the gateway module by copying it to the target directory.
    
    Args:
        target_dir: The directory to copy the gateway module to.
                    If None, copy to the directory where this script is located.
    
    Returns:
        bool: True if successful, False otherwise.
    """
    logger = logging.getLogger('gateway_setup')
    
    try:
        # Get the source gateway module
        cwd = os.getcwd()
        source_gateway = os.path.join(cwd, "ext_repos", "Cello-v2-1-Core", "core_algorithm", "utils", "py4j_gateway", "gateway.py")
        
        # Check if source exists
        if not os.path.exists(source_gateway):
            logger.error(f"Source gateway module not found at: {source_gateway}")
            return False
        
        # Set the target directory
        if target_dir is None:
            target_dir = os.path.dirname(os.path.abspath(__file__))
        
        # Create the target directory if it doesn't exist
        os.makedirs(target_dir, exist_ok=True)
        
        # Set the target path
        target_gateway = os.path.join(target_dir, "gateway.py")
        
        # Copy the gateway module
        shutil.copy2(source_gateway, target_gateway)
        logger.info(f"Copied gateway module to: {target_gateway}")
        
        # Create a config.py file with the BASE_DIR
        config_path = os.path.join(target_dir, "config.py")
        with open(config_path, 'w') as f:
            f.write(f"# Generated by gateway_setup.py\n")
            f.write(f"BASE_DIR = '{cwd}'\n")
        logger.info(f"Created config.py at: {config_path}")
        
        return True
    
    except Exception as e:
        logger.error(f"Error setting up gateway: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    # Configure logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger = logging.getLogger('gateway_setup')
    
    # Parse command line arguments
    import argparse
    parser = argparse.ArgumentParser(description="Set up the gateway module")
    parser.add_argument('--target-dir', help='Target directory to copy the gateway module to')
    args = parser.parse_args()
    
    # Set up the gateway
    success = setup_gateway(args.target_dir)
    
    if success:
        logger.info("Gateway setup successful")
        sys.exit(0)
    else:
        logger.error("Gateway setup failed")
        sys.exit(1) 