# llm_module.py

import os
from openai import OpenAI
from dotenv import load_dotenv

class LLMModule:
    def __init__(self, model_name: str = "gpt-4o"):
        """
        Initialize the LLM module with the chosen model or API.
        """
        self.model_name = model_name
        
        # read key from .env file
        load_dotenv()
        self.api_key = os.getenv("OPENAI_API_KEY")

        if not self.api_key:
            raise ValueError("OPENAI_API_KEY environment variable must be set.")
        
        # Configure the OpenAI library with the API key
        self.client = OpenAI(api_key=self.api_key)
        if self.model_name != "gpt-4o":
            raise ValueError(f"Unsupported model: {model_name}")
        

    def parse_specification(self, specification: str) -> str:
        """
        Convert a natural language specification into a formal logic representation (e.g., Verilog code).

        The input (specification) is expected to describe a genetic circuit.

        Returns:
            A string containing the Verilog code generated by the LLM.
        """
        messages = [
            {
                "role": "system",
                "content": (
                    "You are an expert in synthetic biology circuit design. "
                    "Convert natural language genetic circuit descriptions into formal Verilog code "
                    "suitable for synthesis with tools like Cello."
                ),
            },
            {
                "role": "user",
                "content": specification,
            },
        ]

        try:
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=messages,
                temperature=0
            )
            verilog_code = response.choices[0].message.content.strip()
            return verilog_code
        except Exception as e:
            raise RuntimeError(
                "Failed to generate formal logic representation from the specification."
            ) from e


# Optional: A simple CLI for testing the module directly.
if __name__ == "__main__":
    llm = LLMModule()
    spec = "Create a circuit that produces GFP only after a 30-minute delay following the introduction of an inducer."
    verilog_code = llm.parse_specification(spec)
    print(verilog_code)





